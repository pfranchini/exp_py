#!/usr/bin/python3

import numpy
import math
import matplotlib.pyplot as plt

import sys
sys.path.append('..')
from non_lin_osc import *

# Test osc_solve_per_* functions for Duffing oscillator

w0 = 1
tau = 5
aa = [-0.03, 0, 0.1]
F  = 1
ww = numpy.linspace(0.1,2,200)

for a in aa:
  amp0 = numpy.zeros(ww.size)
  amp1 = numpy.zeros(ww.size)
  ph1  = numpy.zeros(ww.size)


  for i in range(ww.size):
    w = ww[i]

    # analytical solution (min branch)
    rr = osc_duff_amp(w,F,w0,tau, a)/F
    amp0[i] = numpy.min(rr)

    # solving one period
    uv = osc_solve_per(osc_duffing, [w0,tau,a], F,w)
    amp1[i] = numpy.hypot(uv[0],uv[1])/F
    ph1[i]  = numpy.arctan2(uv[1],uv[0])

  plt.plot(ww, amp0, 'k--')
  plt.plot(ww, amp1, 'r-')

plt.xlabel('frequency')
plt.ylabel('amplitude/drive')
plt.legend()
plt.savefig('plot_duff.png')
