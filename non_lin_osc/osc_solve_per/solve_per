#!/usr/bin/python3

import numpy
import math
import matplotlib.pyplot as plt
import sys
sys.path.append('..')
from non_lin_osc import *

# test for osc_solve_per_* functions


# Oscillator parameters:
w0  = 1
tau = 2
a   = 0.045
F   = 5
w   = 0.5
nper = 3

res = osc_solve_per_func(osc_duffing, (w0, tau, a), F, w, nper = nper)

# result, calculated in 100-point mesh:
t = numpy.linspace(0, 2*math.pi/w*nper, 100*nper)
x = res.sol(t)[0]

# calculate 3 first harmonics:
nh = 3;
Hr = numpy.zeros(nh)
Hi = numpy.zeros(nh)
HH = numpy.zeros((nh,t.size))
for h in range(0,nh):
  T = (h+1)*t*w
  Sin = numpy.sin(T)
  Cos = numpy.cos(T)
  (Hr[h], Hi[h]) = osc_solve_per_harm(res, h+1)
  HH[h,:]  = Cos*Hr[h] + Sin*Hi[h]

# plot everything
plt.plot(t, x, 'r.-', label="solution")
plt.plot(t, HH[0], label="harm-1")
plt.plot(t, HH[1], label="harm-2")
plt.plot(t, HH[2], label="harm-3")
plt.legend()
plt.savefig('solve_per.png')

